test(X) :- inorder(tree(leaf(1),tree(tree(leaf(2),leaf(3)),leaf(4))),X)./* :- table inorder/2.*/inorder(leaf(L),[L]).inorder(tree(Left,Right),InfoList) :-	inorder(Left,LeftList),	app(LeftList,RightList,InfoList),	inorder(Right,RightList).inorder2(leaf(L),[L]).inorder2(tree(Left,Right),InfoList) :-	InfoList = [_H1,_H2|_T],	app(LeftList,RightList,InfoList),	inorder2(Left,LeftList),	inorder2(Right,RightList).	app([],L,L).app([H|X],Y,[H|Z]) :- app(X,Y,Z)./* Apply ECCE+MSV twice (note just MSV on original progr. does not suffice) */inorder__1(leaf(X1),[X1]).inorder__1(tree(X1,X2),[X3,X4|X5]) :-     inorder__1_conj__2(X1,X3,X4,X5,X2).inorder__1_conj__2(leaf(X1),X1,X2,X3,X4) :-     inorder__1__4(X4,X2,X3).inorder__1_conj__2(tree(X1,X2),X3,X4,[X5|X6],X7) :-      app_conj__2__3(X8,X5,X6,X7), /* reversed */    inorder__1_conj__2(X1,X3,X4,X8,X2).app_conj__2__3([],X1,X2,X3) :-     inorder__1__4(X3,X1,X2).app_conj__2__3([X1|X2],X1,[X3|X4],X5) :-     app_conj__2__3(X2,X3,X4,X5).inorder__1__4(leaf(X1),X1,[]).inorder__1__4(tree(X1,X2),X3,[X4|X5]) :-     inorder__1_conj__2(X1,X3,X4,X5,X2)./* Now we get the desired result> ?-inorder__1(T,[1,2,3]).  T = tree(leaf(1),tree(leaf(2),leaf(3)))Yes ;  T = tree(tree(leaf(1),leaf(2)),leaf(3))Yes ;No> ?-inorder__1(T,[1,2,3,4,5]).  T = tree(leaf(1),tree(leaf(2),tree(leaf(3),tree(leaf(4),leaf(5)))))Yes ;  T = tree(leaf(1),tree(leaf(2),tree(tree(leaf(3),leaf(4)),leaf(5))))Yes ;  T = tree(leaf(1),tree(tree(leaf(2),leaf(3)),tree(leaf(4),leaf(5))))Yes ;  T = tree(leaf(1),tree(tree(leaf(2),tree(leaf(3),leaf(4))),leaf(5)))Yes ;  T = tree(leaf(1),tree(tree(tree(leaf(2),leaf(3)),leaf(4)),leaf(5)))Yes ;  T = tree(tree(leaf(1),leaf(2)),tree(leaf(3),tree(leaf(4),leaf(5))))Yes ;  T = tree(tree(leaf(1),leaf(2)),tree(tree(leaf(3),leaf(4)),leaf(5)))Yes ;  T = tree(tree(leaf(1),tree(leaf(2),leaf(3))),tree(leaf(4),leaf(5)))Yes ;  T = tree(tree(tree(leaf(1),leaf(2)),leaf(3)),tree(leaf(4),leaf(5)))Yes ;  T = tree(tree(leaf(1),tree(leaf(2),tree(leaf(3),leaf(4)))),leaf(5))Yes ;  T = tree(tree(leaf(1),tree(tree(leaf(2),leaf(3)),leaf(4))),leaf(5))Yes ;  T = tree(tree(tree(leaf(1),leaf(2)),tree(leaf(3),leaf(4))),leaf(5))Yes ;  T = tree(tree(tree(leaf(1),tree(leaf(2),leaf(3))),leaf(4)),leaf(5))Yes ;  T = tree(tree(tree(tree(leaf(1),leaf(2)),leaf(3)),leaf(4)),leaf(5))Yes ;No*//* just the MSV of the original program suffices as well:inorder2(leaf(X1),[X1]).inorder2(tree(X1,X2),[X3,X4|X5]) :-     app([X6|X7],[X8|X9],[X3,X4|X5]),     inorder2(X1,[X6|X7]),     inorder2(X2,[X8|X9]).app([],X1,X1).app([X1|X2],X3,[X1|X4]) :-     app(X2,X3,X4).    > ?-inorder2(L,[1,2,3]).  L = tree(leaf(1),tree(leaf(2),leaf(3)))Yes ;  L = tree(tree(leaf(1),leaf(2)),leaf(3))Yes ;No*/