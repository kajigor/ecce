/* Example basicME

vars
    x0 x1 x2 x3 x4

rules
    x0 >= 1,
    x1 >= 1,
    x2 >= 1 ->
		    x0' = x0-1,
		    x2' = x2-1,
		    x3' = x3+1;

    x0 >= 1,
    x1 >= 1,
    x2 >= 1 ->
		    x0' = x0-1,
		    x1' = x1-1,
		    x4' = x4+1;

    x3 >= 1 ->
		    x0' = x0+1,
		    x2' = x2+1,
		    x3' = x3-1;

    x4 >= 1 ->
		    x0' = x0+1,
		    x1' = x1+1,
		    x4' = x4-1;
init
    x0 >= 1, x1 = 1, x2 = 1, x3 = 0, x4 = 0

target
    x3 >= 1, x4 >= 1

prolog target :
forward : sat([X0,X1,X2,s(X3),s(X4)])
backward : p([s(X0),s(0),s(0),0,0])

*/

trans(t1,[s(X0),s(X1),s(X2),X3,X4],[X0,s(X1),X2,s(X3),X4]).
trans(t2,[s(X0),s(X1),s(X2),X3,X4],[X0,X1,s(X2),X3,s(X4)]).
trans(t3,[X0,X1,X2,s(X3),X4],[s(X0),X1,s(X2),X3,X4]).
trans(t4,[X0,X1,X2,X3,s(X4)],[s(X0),s(X1),X2,X3,X4]).


prop([X0,X1,X2,s(X3),s(X4)],unsafe).

start([s(0),s(0),s(0),0,0]).
start(Para,[Para,s(0),s(0),0,0]).

/* Finite state model checking tasks */
finite_state_model_check(csm_safety,Formula) :- start(S),
     Formula = sat(S,ef(p(unsafe))).

/* model checking tasks with K process */
k_processes_model_check(SK,Formula) :- start(SK,S),
     Formula = sat(S,ef(p(unsafe))).
     
/* Parametric / Infinite Model Checking Tasks */
infinite_model_check(basic_safety,Formula) :- start(_,S),
     Formula = sat(S,ef(p(unsafe))).


