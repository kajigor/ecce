:- mode l_eval(i,i,o).l_eval([],_E,[]).l_eval([H|T],E,[EH|ET]) :-	eval(H,E,EH),	l_eval(T,E,ET).:- mode eval(i,i,o)./* eval(X,E,R) :- print(eval(X,E)),nl,fail. */eval(constr(C,Args),Env,constr(C,EArgs)) :-	l_eval(Args,Env,EArgs).eval(var(VKey),Env,Val) :- lookup(VKey,Env,Val).eval(plus(X,Y),Env,constr(XY,[])) :-	eval(X,Env,constr(VX,[])),	eval(Y,Env,constr(VY,[])),	XY is VX + VY.eval(times(X,Y),Env,constr(XY,[])) :-	eval(X,Env,constr(VX,[])),	eval(Y,Env,constr(VY,[])),	XY is VX * VY.eval(eq(X,Y),Env,constr(true,[])) :-	eval(X,Env,VX),	eval(Y,Env,VY),	VX=VY.eval(eq(X,Y),Env,constr(false,[])) :-	eval(X,Env,VX),	eval(Y,Env,VY),	VX\==VY.eval(let(VKey,VExpr,InExpr),Env,Result) :-        eval(VExpr,Env,VVal),        store(Env,VKey,VVal,InEnv),        eval(InExpr,InEnv,Result).eval(if(Test,Then,Else),Env,Res) :-	eval(Test,Env,constr(true,[])),	eval(Then,Env,Res).eval(if(Test,Then,Else),Env,Res) :-	eval(Test,Env,constr(false,[])),	eval(Else,Env,Res).eval(lambda(X,Expr),Env,lambda(X,Expr)).eval(apply(Arg,F),Env,Res) :-	eval(F,Env,FVal),	rename(FVal,Env,lambda(X,Expr)),	eval(Arg,Env,ArgVal),        store(Env,X,ArgVal,NewEnv),	eval(Expr,NewEnv,Res).rename(Expr,Env,RenExpr) :- RenExpr = Expr.:- mode store(i,i,i,o).store([],Key,Value,[Key/Value]).store([Key/Value2|T],Key,Value,[Key/Value|T]).store([Key2/Value2|T],Key,Value,[Key2/Value2|BT]) :-   Key \== Key2,   store(T,Key,Value,BT).:- mode lookup(i,i,o).lookup(Key,[Key/Value|T],Value).lookup(Key,[Key2/Value2|T],Value) :-   Key \== Key2,   lookup(Key,T,Value).   test(X,Res) :-	eval(let(x,times(cst(X),cst(X)),	    if(eq(var(x),cst(1)),cst(0),plus(var(x),var(x)))),[],Res).test2(X,Res) :-	eval(apply(constr(X,[]),lambda(x,plus(var(x),var(x)))),[],Res).test3(L,Res) :-	F = lambda(x,plus(var(x),var(x))),	eval(apply(L,lambda(l,apply(F,		lambda(f,		 if(eq(var(l),constr(null,[])),		    constr(null,[]),		    apply(var(l),var(f))		    )	        )	     ))),	     [],Res).	     /* ECCCE SPEC test2(X1,constr(X2,[])) :-     X2 is '+'(X1,X1).test2__1(X1,constr(X2,[])) :-     X2 is '+'(X1,X1).*/