solve([]).solve([H|T]) :-	claus(H,Bdy),	solve(Bdy),solve(T).claus(append([],L,L),[]).claus(append([H|X],Y,[H|Z]),[append(X,Y,Z)]).claus(solve([]),[]).claus(solve([H|T]), [claus(H,Bdy),solve(Bdy),solve(T)]).claus(claus(append([],L,L),[]),[]).claus(claus(append([H|X],Y,[H|Z]),[append(X,Y,Z)]),[]).claus(mergesort([],[]), []).claus(mergesort([X],[X]), []).claus(mergesort([X,Y|Xs],Ys), [        split([X,Y|Xs],X1s,X2s),        mergesort(X1s,Y1s),mergesort(X2s,Y2s),        merge(Y1s,Y2s,Ys) ]).claus(split([],[],[]), []).claus(split([X|Xs],[X|Ys],Zs) , [ split(Xs,Zs,Ys) ]).claus(merge([],Xs,Xs), []).claus(merge(Xs,[],Xs), []).claus(merge([X|Xs],[Y|Ys],[X|Zs]) ,    [ X =< Y, merge(Xs,[Y|Ys],Zs) ]).claus(  merge([X|Xs],[Y|Ys],[Y|Zs]) ,    [ X>Y, merge([X|Xs],Ys,Zs)]).claus('=<'(X,Y),[]) :- X =< Y.claus('>'(X,Y),[]) :- X > Y.test1(X,Y,Z) :- solve([append(X,Y,Z)]).test2(X,Y,Z) :- solve([solve([append(X,Y,Z)])]).mergesort_test(X) :-	solve([mergesort([3,1,2],X)]).