test(X,Y) :- solve_atom(p(X,Y),[type(list(any),X)])./* TYPE CHECKING PART */regular_type(list(_X),[],[]).regular_type(list(X),[H|T],[type(X,H), type(list(X),T)]).regular_type(cst(X),X,[]).regular_type(any,_,[]).is_of_regular_type(Type,X) :- regular_type(Type,X,Cond), check_condition(Cond).check_condition([]).check_condition([type(Type,X)|T]) :-   is_of_regular_type(Type,X),  check_condition(T)./* INTERPRETER PART */solve([],_Constraint).solve([H|T],Constraint) :- print(proj(Constraint,H)),nl,   project_constraint(Constraint,H,CH),print(CH),   solve_atom(H,CH),   solve(T,Constraint).solve_atom(A,CA) :- print(solve_atom(A,CA)),nl,   claus(Nr,A,Body), print(c(Nr,CA)),nl,   simplify_constraint(CA,SCA), print(SCA),nl,   solve(Body,SCA)./* Clause Database */claus(1,p([],b),[]).claus(2,p([_H|T],Y),[p(T,Y)]).claus(3,p(g(_X),c),[]).append([],L,L).append([H|X],Y,[H|Z]) :- append(X,Y,Z)./* DIRTY PART */simplify_constraint([],[]).simplify_constraint([type(Type,X)|T],SC) :-  ((nonvar(X) ; (Type=any)) ->     (regular_type(Type,X,Cond),      append(Cond,T,SC)     )   ; (SC = ST)  ),  simplify_constraint(T,ST).project_constraint([],_H,[]).project_constraint([C|Cs],H,Constraint) :-  (sharing(C,H) -> (Constraint=[C|PCs]) ; (Constraint = PCs)),  project_constraint(Cs,H,PCs)./* Already in ECCE */:- use_module(library(terms)).sharing(Goal1,Goal2) :-	varlist(Goal1,Vars1),	\+(\+(share_vars(Goal2,Vars1))).share_vars(X,Vars) :-	numbervars(X,1,_),	contains_nonvar(Vars).contains_nonvar([X|_T]) :- nonvar(X).contains_nonvar([_X|T]) :- contains_nonvar(T).varlist(T,VList) :- term_variables(T,VList).