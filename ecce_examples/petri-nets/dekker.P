/*
#Dekker's Mutual Exclusion Algorithm 
#Petri Net model for two processes 

vars 
  X1 X9 X11 X13 X15 X2 X3 X4 X5 X6 X7 X8 X10 X12 X14 X16 X17 X18 X19 X20 X21 X22
rules 
  0)  X1>=1,X9>=1 		->	 X1'=X1-1 ,X9'=X9-1 ,X2'=X2+1 ,X10'=X10+1;
  1)  X2>=1,X13>=1 		->	 X2'=X2-1 ,X3'=X3+1 ;
  2)  X3>=1,X11>=1 		->	 X3'=X3-1 ,X11'=X11-1 ,X4'=X4+1 ,X12'=X12+1 ;
  3)  X3>=1,X12>=1 		->	 X3'=X3-1 ,X4'=X4+1 ;
  4)  X4>=1,X10>=1 		->	 X4'=X4-1 ,X10'=X10-1 ,X1'=X1+1 ,X9'=X9+1 ;
  5)  X2>=1,X14>=1 		->	 X2'=X2-1 ,X5'=X5+1 ;
  6)  X5>=1,X11>=1 		->	 X5'=X5-1 ,X2'=X2+1 ;
  7)  X5>=1,X12>=1 		->	 X5'=X5-1 ,X6'=X6+1 ;
  8)  X6>=1,X10>=1 		->	 X6'=X6-1 ,X10'=X10-1 ,X7'=X7+1 ,X9'=X9+1 ;
  9)  X7>=1,X12>=1 		->	 ;
  10) X7>=1,X11>=1 		->	 X7'=X7-1 ,X8'=X8+1 ;
  11) X8>=1,X9>=1 		->	 X8'=X8-1 ,X9'=X9-1 ,X2'=X2+1 ,X10'=X10+1 ;
  12) X15>=1,X13>=1 	->	 X15'=X15-1 ,X13'=X13-1 ,X16'=X16+1 ,X14'=X14+1 ;
  13) X16>=1,X9>=1 		->	 X16'=X16-1 ,X17'=X17+1 ;
  14) X17>=1,X12>=1 	->	 X17'=X17-1 ,X12'=X12-1 ,X18'=X18+1 ,X11'=X11+1 ;
  15) X17>=1,X11>=1 	->	 X17'=X17-1 ,X18'=X18+1 ;
  16) X18>=1,X14>=1 	->	 X18'=X18-1 ,X14'=X14-1 ,X15'=X15+1 ,X13'=X13+1 ;
  17) X16>=1,X10>=1 	->	 X16'=X16-1 ,X19'=X19+1 ;
  18) X19>=1,X12>=1 	->	 X19'=X19-1 ,X16'=X16+1 ;
  19) X19>=1,X11>=1 	->	 X19'=X19-1 ,X20'=X20+1 ;
  20) X20>=1,X14>=1 	->	 X20'=X20-1 ,X14'=X14-1 ,X21'=X21+1 ,X13'=X13+1 ;
  21) X21>=1,X11>=1 	->	 ;
  22) X21>=1,X12>=1 	->	 X21'=X21-1 ,X22'=X22+1 ;
  23) X22>=1,X13>=1 	->	 X22'=X22-1 ,X13'=X13-1 ,X16'=X16+1 ,X14'=X14+1 ;
init
  X1=1,X9=1,X11=1,X13=1,X15=1,X2=0,X3=0,X4=0,X5=0,X6=0,X7=0,X8=0,X10=0,X12=0,X14=0,X16=0,X17=0,X18=0,X19=0,X20=0,X21=0,X22=0

target
 X3>=1,X17>=1

*/

 trans(t0,[s(X1),X2,X3,X4,X5,X6,X7,X8,s(X9),X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,s(X2),X3,X4,X5,X6,X7,X8,X9,s(X10),X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t1,[X1,s(X2),X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,s(X13),X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,s(X3),X4,X5,X6,X7,X8,X9,X10,X11,X12,s(X13),X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t2,[X1,X2,s(X3),X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,s(X4),X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t3,[X1,X2,s(X3),X4,X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,s(X4),X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t4,[X1,X2,X3,s(X4),X5,X6,X7,X8,X9,s(X10),X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[s(X1),X2,X3,X4,X5,X6,X7,X8,s(X9),X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t5,[X1,s(X2),X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,s(X14),X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,s(X5),X6,X7,X8,X9,X10,X11,X12,X13,s(X14),X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t6,[X1,X2,X3,X4,s(X5),X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,s(X2),X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t7,[X1,X2,X3,X4,s(X5),X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,s(X6),X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t8,[X1,X2,X3,X4,X5,s(X6),X7,X8,X9,s(X10),X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,s(X7),X8,s(X9),X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t9,[X1,X2,X3,X4,X5,X6,s(X7),X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,s(X7),X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t10,[X1,X2,X3,X4,X5,X6,s(X7),X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,s(X8),X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t11,[X1,X2,X3,X4,X5,X6,X7,s(X8),s(X9),X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22],[X1,s(X2),X3,X4,X5,X6,X7,X8,X9,s(X10),X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22]).
 trans(t12,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,s(X13),X14,s(X15),X16,X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,s(X14),X15,s(X16),X17,X18,X19,X20,X21,X22]).
 trans(t13,[X1,X2,X3,X4,X5,X6,X7,X8,s(X9),X10,X11,X12,X13,X14,X15,s(X16),X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,s(X9),X10,X11,X12,X13,X14,X15,X16,s(X17),X18,X19,X20,X21,X22]).
 trans(t14,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,s(X17),X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,s(X18),X19,X20,X21,X22]).
 trans(t15,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,s(X17),X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,s(X18),X19,X20,X21,X22]).
 trans(t16,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,s(X14),X15,X16,X17,s(X18),X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,s(X13),X14,s(X15),X16,X17,X18,X19,X20,X21,X22]).
 trans(t17,[X1,X2,X3,X4,X5,X6,X7,X8,X9,s(X10),X11,X12,X13,X14,X15,s(X16),X17,X18,X19,X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,s(X10),X11,X12,X13,X14,X15,X16,X17,X18,s(X19),X20,X21,X22]).
 trans(t18,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,s(X19),X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,s(X16),X17,X18,X19,X20,X21,X22]).
 trans(t19,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,s(X19),X20,X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,s(X20),X21,X22]).
 trans(t20,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,s(X14),X15,X16,X17,X18,X19,s(X20),X21,X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,s(X13),X14,X15,X16,X17,X18,X19,X20,s(X21),X22]).
 trans(t21,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,X20,s(X21),X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,s(X11),X12,X13,X14,X15,X16,X17,X18,X19,X20,s(X21),X22]).
 trans(t22,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,s(X21),X22],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,s(X12),X13,X14,X15,X16,X17,X18,X19,X20,X21,s(X22)]).
 trans(t23,[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,s(X13),X14,X15,X16,X17,X18,X19,X20,X21,s(X22)],[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,s(X14),X15,s(X16),X17,X18,X19,X20,X21,X22]).

enable(A,E) :- trans(A,E,_F).
 

/* The basic properties */
prop([_X1,_X2,s(_X3),_X4,_X5,_X6,_X7,_X8,_X9,_X10,_X11,_X12,_X13,_X14,_X15,_X16,s(_X17),_X18,_X19,_X20,_X21,_X22],unsafe).
prop([_X1,s(_X2),_X3,_X4,_X5,_X6,_X7,_X8,_X9,_X10,_X11,_X12,_X13,_X14,_X15,_X16,_X17,_X18,_X19,_X20,_X21,_X22],trying1).
prop([_X1,_X2,s(_X3),_X4,_X5,_X6,_X7,_X8,_X9,_X10,_X11,_X12,_X13,_X14,_X15,_X16,_X17,_X18,_X19,_X20,_X21,_X22],satisfied1).

/* The start state for the animator and for backwards analysis */
start([s(0),0,0,0,0,0,0,0,s(0),0,s(0),0,s(0),0,s(0),0,0,0,0,0,0,0]).

/* Standard case finite state model checking tasks */
finite_state_model_check(decker_safety,Formula) :- start(S),
     Formula = sat(S,not(ef(p(unsafe)))).
finite_state_state_model_check(decker_liveness,Formula) :- start(S),
     Formula = sat(S,ag(or(not(p(trying1)),ef(p(satisfied1))))).

/* model checking tasks with K process */
k_processes_model_check(_,_) :- fail.
     
/* Parametric / Infinite Model Checking Tasks */
infinite_model_check(rw_safety,Formula) :- fail.
