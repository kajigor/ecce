/* xsb_model_check.P */:- [ctl].:- [clarke_mutex].fsm :-  print('STARTING FINITE STATE MODEL CHECKING'),nl,  finite_state_model_check(X,sat(State,Formula)),  print('Ex ---> '), print(X),nl,  print('         CTL:'), print(Formula),nl,  print('         Init:'), print(State),nl,  abolish_all_tables,  cputime(T1),   ( sat(State,Formula)               -> ( cputime(T2),print('Formula true'))               ;  (cputime(T2),print('Formula false'))),nl,  print('Time: '), D is T2-T1, print(D), print(' s'),nl, fail.fsm :- print('DONE'),nl.gen_int(0,0).gen_int(X,s(Y)) :- X>0, X1 is X-1, gen_int(X1,Y).pmc :- pmc(0,10,1).pmc(Start,UpBound,Step) :-  ((Start>UpBound) -> (print('DONE'),nl)    ; (pmc(Start), S1 is Start+Step, pmc(S1,UpBound,Step))).pmc(X) :-  print('MODEL CHECKING WITH K processes'),nl,  gen_int(X,SX),  k_processes_model_check(SX,sat(State,Formula)),  print('Parameter ---> '), print(X),nl,  print('              CTL:'), print(Formula),nl,  print('              Init:'), print(State),nl,  abolish_all_tables,  cputime(T1),   ( sat(State,Formula)               -> ( cputime(T2),print('Formula true'))               ;  (cputime(T2),print('Formula false'))),nl,  print('Time: '), D is T2-T1, print(D), print(' s'),nl,  print('DONE'),nl.imc :-  print('PARAMETRIC / INFINITE MODEL CHECKING '),nl,  infinite_model_check(X,sat(State,Formula)),  print('Ex ---> '), print(X),nl,  print('              CTL:'), print(Formula),nl,  print('              Init:'), print(State),nl,  abolish_all_tables,  cputime(T1),   ( sat(State,Formula)               -> ( cputime(T2),print('Formula true'))               ;  (cputime(T2),print('Formula false'))),nl,  print('Time: '), D is T2-T1, print(D), print(' s'),nl,  print('DONE'),nl.:- table forward/1.forward(X) :- prop(X,unsafe).forward(X) :- trans(X,Y), forward(Y).:- table backward/1.backward(X) :- start(X).backward(X) :- trans(Y,X), backward(Y).pmcu :- pmc_unsafe(0,10,1).pmc_unsafe(Start,UpBound,Step) :-  ((Start>UpBound) -> (print('DONE'),nl)    ; (pmc_unsafe(Start), S1 is Start+Step, pmc_unsafe(S1,UpBound,Step))).    pmc_unsafe(X) :-  print('CHECKING WITH K PROCESSES FOR ef(p(unsafe))'),nl,  gen_int(X,SX),  k_processes_model_check(SX,sat(State,ef(p(unsafe)))),  print('Parameter ---> '), print(X),nl,  print('              Init:'), print(State),nl,  abolish_all_tables,  cputime(T1),   ( forward(State)               -> ( cputime(T2),print('Formula true'))               ;  (cputime(T2),print('Formula false'))),  nl,  print('Time: '), D is T2-T1, print(D), print(' s'),nl,  print('DONE'),nl.