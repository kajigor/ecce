/* A Model Checker for CTL fomulas */
/* written for XSB-Prolog */
/* by Michael Leuschel, Thierry Massart */

/* tries to compute witnesses/counter-examples as well */


/* :- table sat/2. */

sat(State,Formula) :- sat(State,Formula,_Trace).

/* :- table sat/3. */

sat(_E,true,[]).


sat(E,p(P),[p(P)]) :- prop(E,P). /* elementary proposition */















sat(E,eu(F,G),T) :- /* exists until */
    sat_eu(E,F,G,T).



sat(E,ef(F),T) :- /* exists future */
 sat(E,eu(true,F),T).






  

/* :- table sat_eu/4. */
/* tabulation to compute least-fixed point using XSB */
  
sat_eu(E,_F,G,[holds(G,T)]) :- /* exists until */
    sat(E,G,T).
sat_eu(E,F,G,[Act|T]) :- /* exists until */
   sat(E,F),
   trans(Act,E,E2), sat_eu(E2,F,G,T).


/* :- table sat_noteg/2. */
/* tabulation to compute least-fixed point using XSB */



   


  
  
  /* ------------------------------------------------ */
  
  
le(X,X).
le(X,s(Y)) :- le(X,Y).

trans(t0,[think,P2,A1,A2,T,S], [wait,P2,T,A2,s(T),S]).
trans(t1,[wait,P2,A1,A2,T,S], [use,P2,A1,A2,T,S]) :- le(A1,S).
trans(t2,[use,P2,A1,A2,T,S], [think,P2,A1,A2,T,s(S)]).
trans(t3,[P1,think,A1,A2,T,S], [P1,wait,A1,T,s(T),S]).
trans(t4,[P1,wait,A1,A2,T,S], [P1,use,A1,A2,T,S]) :- le(A2,S).
trans(t5,[P1,use,A1,A2,T,S], [P1,think,A1,A2,T,s(S)]). 
 

/* The basic properties */
prop([use,use,A1,A2,T,S],unsafe).



/* The start state for the animator and for backwards analysis */
start([think,think,0,0,0,0]).



slice1(T) :- start(S), sat(S,ef(p(unsafe)),T).
