:- dynamic o1/0, o2/0, o3/0, o4/0, even/1, odd/1.:- dynamic wierd_even/2, wierd_odd/2, wierd_p/1, wicked_p/1, wo1/0, wo2/0.:- dynamic m1/0, m2/0, m3/0, sameMultiSet/2.:- dynamic mo1/0, mo2/0, mo3/0, sameMultiSet2/2.:- dynamic ml1/0, sml/2, delete/3, m_subset/3, app/3.:- dynamic bpo2/0, bpo3/0, bpl2/0, bpl3/0, bzo2/0, bzo3/0, bzl2/0, bzl3/0.:- dynamic causesPair/2, causesPair/3, causesPairl/2, causesPairl/3.:- dynamic causesZero/2, causesZero/3, causesZerol/2, causesZerol/3.:- dynamic actionPair/2, actionPair/3, actionPairl/2, actionPairl/3.:- dynamic actionZero/2, actionZero/3, actionZerol/2, actionZerol/3.:- dynamic bl2/0, bla2/0, bpl2a/0, bpl3a/0.:- dynamic p/0, p/1, q/1.% the problem is to show that init fails.:- dynamic init/0, mv/1, tr/2, cFirst/1, nOnly/1, atleast2c/1, atleast1c/1.init:- cFirst(R), mv(R).p:- p(X).p(X):- q(c).q(a).o1 :- even(X), even(s(X)).o2 :- even(X), odd(X).o3 :- even(X), even(s(s(s(X)))).o4 :- even(X), even(s(s(X))). %has solutionwo1 :- wierd_even(X, _U1), wierd_even(s(X), _U2).				% as o1, but with extra 				%supefluous argument, functors and predicate.wo2:- even(X), odd(s(X)), wicked_p(X).m1 :- sameMultiSet(a, X), sameMultiSet(X, b).m2 :- sameMultiSet(o(a,o(a,emptyMultiSet)),o(_X,o(emptyMultiSet,b))).m3 :- sameMultiSet(o(a,o(a,o(emptyMultiSet,b))),                    o(o(a,b),o(a,emptyMultiSet))).				% has solutionml1 :-  sml([a], X), sml(X, [b]). % as m1 but with lists instead of "o"% mo? are calls to a erroneous implementationof sameMultiSet mo1 :- sameMultiSet2(a, X), sameMultiSet2(X, b).mo2 :- sameMultiSet2(o(a,o(a,emptyMultiSet)),o(_X,o(emptyMultiSet,b))).mo3 :- sameMultiSet2(o(a,o(a,o(emptyMultiSet,b))),                    o(o(a,b),o(a,emptyMultiSet))). % (has solution))bpo2:-	causesPair(o(on(s(nul),nul), o(ta(nul), o(cl(s(nul)),em))),		   o(on(s(s(nul)),s(nul)), o(on(s(nul),nul), o(ta(nul),						       o(cl(s(s(nul))),em))))).bpo3:-	causesPair(o(on(s(nul),nul), o(ta(nul), o(cl(s(nul)),em))), _Plan,		   o(on(s(s(nul)),s(nul)), o(on(s(nul),nul), o(ta(nul),						       o(cl(s(s(nul))),em))))). bpl2:-	causesPairl([on(s(nul),nul),ta(nul),cl(s(nul)),em],		    [on(s(s(nul)),s(nul)),on(s(nul),nul),ta(nul),cl(s(s(nul))),em]).bpl2a:-	causesPairl([on(s(nul),nul),ta(nul),cl(s(nul)),em], Sequence),	m_subset([on(s(s(nul)),s(nul)),on(s(nul),nul),ta(nul),cl(s(s(nul))),em],		 Sequence, []).bpl3:-	causesPairl([on(s(nul),nul),ta(nul),cl(s(nul)),em], _Plan,		   [on(s(s(nul)),s(nul)),on(s(nul),nul),ta(nul),cl(s(s(nul))),em]).				% was bla1bpl3a:-	causesPairl([on(s(nul),nul),ta(nul),cl(s(nul)),em], _Plan, Sequence),	m_subset([on(s(s(nul)),s(nul)),on(s(nul),nul),ta(nul),cl(s(s(nul))),em],		 Sequence, []).bzo2:-	causesZero(o(o(on(s(s(nul)), s(nul)), cl(s(s(nul)))), em),		   o(on(s(nul), nul), _Z)).				% was b1bzo3:-	causesZero(o(o(on(s(s(nul)), s(nul)), cl(s(s(nul)))), em), _P,		   o(on(s(nul), nul), _Z)).bzl2:-	causesZerol([on(s(s(nul)), s(nul)), cl(s(s(nul))), em], A), 	m_subset([on(s(nul), nul)], A, _Z ).				% was bl1 and bl3bzl3:-	causesZerol([on(s(s(nul)),s(nul)),cl(s(s(nul))),em],_P,G),        m_subset([on(s(nul),nul)],G,_Z).				% was bla3				% The following query has a solutionbl2:- causesZerol([on(s(nul),nul),ta(nul),cl(s(nul)),em],          [on(s(s(nul)),s(nul)),on(s(nul),nul),ta(nul),cl(s(s(nul))),em]).				% calls the pair actions with the zero-querybla2:- causesPairl([on(s(s(nul)),s(nul)),cl(s(s(nul))),em],_P,G),        m_subset([on(s(nul),nul)],G,_Z).                               % the query above is bpl3b in the papereven(zero).even(s(X)):- odd(X).odd(s(X)):- even(X).wierd_even(nul,U) :- wierd_p(U).wierd_even(s(X),U) :- wierd_odd(X,_V), wierd_p(U).wierd_odd(s(X),U) :- wierd_even(X,_V), wierd_p(U).wierd_p(f(g(h(a)))).  % (or arbitrary complex term)wicked_p(X):- even(X), odd(X).wicked_p(X):- odd(X).wicked_p(X):- even(s(X)), odd(s(X)).wicked_p(X):- even(X).sameMultiSet(X, X).sameMultiSet(o(X, Y), o(X, Z)):-	sameMultiSet(Y, Z).sameMultiSet(o(o(X, Y), Z), U):- 	sameMultiSet(o(X, o(Y, Z)), U).sameMultiSet(U, o(o(X, Y), Z)):-	sameMultiSet(U, o(X, o(Y, Z))).sameMultiSet(o(emptyMultiSet, X), Y):-	sameMultiSet(X, Y).sameMultiSet(X, o(emptyMultiSet, Y)):-	sameMultiSet(X, Y).sameMultiSet(o(X, Y), Z):-	sameMultiSet(o(Y, X), Z).% sameMultiSet with lists sml([], []).sml([X|Y], D):-        delete(X, D, E),        sml(Y, E).causesZero(I1, I2):-	sameMultiSet(I1, I2).causesZero(I, G):-          actionZero(C, E),        sameMultiSet(o(C, Z), I),        causesZero(o(E, Z), G).causesZero(I1, void, I2):-	sameMultiSet(I1, I2).causesZero(I, plan(A, P), G):-          actionZero(C, A, E),        sameMultiSet(o(C, Z), I),        causesZero(o(E, Z), P, G).causesZerol(I, I).causesZerol(I, G):-         actionZerol(C, E),        m_subset(C, I, Z),        app(E, Z, S),        causesZerol(S, G).causesZerol(I,void,I).causesZerol(I,plan(A,P),G) :-	actionZerol(C,A,E), 	m_subset(C,I,Z),	app(E,Z,S),	causesZero(S,P,G).causesPair(I1, I2):-	sameMultiSet(I1, I2).causesPair(I, G):-          actionPair(C, E),        sameMultiSet(o(C, Z), I),        causesPair(o(E, Z), G).causesPair(I1, void, I2):-	sameMultiSet(I1, I2).causesPair(I, plan(A, P), G):-          actionPair(C, A, E),        sameMultiSet(o(C, Z), I),        causesPair(o(E, Z), P, G). causesPairl(I,I).causesPairl(I,G) :-	actionPairl(C,E), 	m_subset(C,I,Z),	app(E,Z,S),	causesPairl(S,G).causesPairl(I,void,I).                   causesPairl(I,plan(A,P),G) :-	actionPairl(C,A,E), 	m_subset(C,I,Z),	app(E,Z,S),	causesPairl(S,P,G). actionZero(ho(V), o(ta(V), o(cl(V), em))).actionZero(o(cl(V), o(ta(V), em)), ho(V)).actionZero(o(ho(V), cl(W)), o(on(V,W), o(cl(V), em))).actionZero(o(cl(V), o(on(V, W), em)), o(ho(V), cl(W))).actionZero(o(on(X, Y), o(cl(X), em)), 	   o(on(s(X), X), o(on(X, Y), o(cl(s(X)), em)))).actionZero(ho(V), put_down(V), o(ta(V), o(cl(V), em))).actionZero(o(cl(V), o(ta(V), em)), pick_up(V), ho(V)).actionZero(o(ho(V), cl(W)), stack(V, W), o(on(V,W), o(cl(V), em))).actionZero(o(cl(V), o(on(V, W), em)), unstack(V), o(ho(V), cl(W))).actionZero(o(on(X, Y), o(cl(X), em)), generate_block,	   o(on(s(X), X), o(on(X, Y), o(cl(s(X)), em)))).actionZerol([ho(V)], [ta(V), cl(V), em]).actionZerol([cl(V), ta(V), em], [ho(V)]).actionZerol([ho(V), cl(W)], [on(V,W), cl(V), em]).actionZerol([cl(V), on(V, W), em], [ho(V), cl(W)]).actionZerol([on(X, Y), cl(X), em], 	    [on(s(X), X), on(X, Y), cl(s(X)), em]).actionZerol([ho(V)],put_down(V),[ta(V),cl(V),em]).                           actionZerol([cl(V),ta(V),em],pick_up(V),[ho(V)]).                            actionZerol([ho(V),cl(W)],stack(V,W),[on(V,W),cl(V),em]).                    actionZerol([cl(V),on(V,W),em],unstack(V),[ho(V),cl(W)]).                    actionZerol([on(X,Y),cl(X),em],generate_block,	    [on(s(X),X),on(X,Y),cl(s(X)),em]).                               actionPair(ho(V),put_down(V),o(ta(V),o(cl(V),em))).                            actionPair(o(cl(V),o(ta(V),em)),pick_up(V),ho(V)).                             actionPair(o(ho(V),cl(W)),stack(V,W),o(on(V,W),o(cl(V),em))).actionPair(o(cl(V),o(on(V,W),em)),unstack(V),o(ho(V),cl(W))).actionPair(o(on(V,W),o(cl(V),em)),add_two,                                     	   o(on(s(s(V)),s(V)), o(on(s(V),V), o(on(V,W), o(cl(s(s(V))),em))))).actionPair(o(on(s(s(V)),s(V)), o(on(s(V),V), o(on(V,W), o(cl(s(s(V))),em)))),           delete_two,	   o(on(V,W), o(cl(V),em))).actionPair(ho(V), o(ta(V),o(cl(V),em))).actionPair(o(cl(V),o(ta(V),em)), ho(V)).actionPair(o(ho(V),cl(W)), o(on(V,W),o(cl(V),em))).actionPair(o(cl(V),o(on(V,W),em)), o(ho(V),cl(W))).actionPair(o(on(V,W),o(cl(V),em)),	   o(on(s(s(V)),s(V)), o(on(s(V),V), o(on(V,W), o(cl(s(s(V))),em))))).actionPair(o(on(s(s(V)),s(V)), o(on(s(V),V), o(on(V,W), o(cl(s(s(V))),em)))),	   o(on(V,W), o(cl(V),em))).actionPairl([ho(V)],put_down(V),[ta(V),cl(V),em]).                            actionPairl([cl(V),ta(V),em],pick_up(V),[ho(V)]).                             actionPairl([ho(V),cl(W)],stack(V,W),[on(V,W),cl(V),em]).                     actionPairl([cl(V),on(V,W),em],unstack(V),[ho(V),cl(W)]).                     actionPairl([on(V,W),cl(V),em],add_two,                                     	    [on(s(s(V)),s(V)),on(s(V),V),on(V,W),cl(s(s(V))),em]).             actionPairl([on(s(s(V)),s(V)),on(s(V),V),on(V,W),cl(s(s(V))),em],delete_two,	    [on(V,W),cl(V),em]).                                             actionPairl([ho(V)], [ta(V),cl(V),em]).                            actionPairl([cl(V),ta(V),em], [ho(V)]).                             actionPairl([ho(V),cl(W)], [on(V,W),cl(V),em]).                     actionPairl([cl(V),on(V,W),em], [ho(V),cl(W)]).                     actionPairl([on(V,W),cl(V),em],                                     	    [on(s(s(V)),s(V)),on(s(V),V),on(V,W),cl(s(s(V))),em]).             actionPairl([on(s(s(V)),s(V)),on(s(V),V),on(V,W),cl(s(s(V))),em],	    [on(V,W),cl(V),em]).                                             m_subset([], L, L).m_subset([H|T], L1, L2):-        delete(H, L1, L3),        m_subset(T, L3, L2).delete(M, [M|T], T).delete(M, [H|T], [H|L]):-        delete(M, T, L).app([], X, X).app([X|Y], Z, [X|W]):-        app(Y, Z, W).sameMultiSet2(X, X).sameMultiSet2(o(X1, Y1), o(Y2, X2)):-	sameMultiSet2(X1, X2),	sameMultiSet2(Y1, Y2).sameMultiSet2(o(o(X1, Y1), Z1), o(X2, o(Y2, Z2))):-	sameMultiSet2(X1, X2),	sameMultiSet2(Y1, Y2),	sameMultiSet2(Z1, Z2).sameMultiSet2(o(X2, o(Y2, Z2)), o(o(X1, Y1), Z1)):-	sameMultiSet2(X1, X2),	sameMultiSet2(Y1, Y2),	sameMultiSet2(Z1, Z2).sameMultiSet2(o(X1, emptyMultiSet), X2):-	sameMultiSet2(X1, X2).sameMultiSet2(X1, o(X2, emptyMultiSet)):-	sameMultiSet2(X1, X2).mv(R):- tr(R,NewR), mv(NewR).mv(R):- atleast2c(R).   % success iff R is non-safe statetr([c,n|Rs], [n,c|Rs]).    tr([n|Rs], [n|NewRs]):- tr(Rs,NewRs).tr([],[]).cFirst([c|Qs]):- nOnly(Qs).nOnly([n|Qs]):- nOnly(Qs).nOnly([n]).atleast2c([c|L]):- atleast1c(L).atleast2c([n|L]):- atleast2c(L).atleast1c([c|_]).atleast1c([n|L]):- atleast1c(L).