test :- prove([],imp(imp(p,imp(q,r)),imp(imp(p,q),imp(p,r)))).test2 :- prove([],imp(p,imp(imp(p,false),false))).test3 :- prove([],imp(and(p,imp(p,q)),q)).test4 :- prove([and(p,imp(p,q))],imp(and(p,imp(p,q)),q)).	/* implementation of sequent calculus system on p.110 for	intuitionistic logic */prove(Assumptions,Formula) :- member(Formula,Assumptions). /* Base case */prove(A,and(F,G)) :- prove(A,F), prove(A,G). /* R-and */prove(A,or(F,_G)) :- prove(A,F). /* R-or 1 */prove(A,or(_F,G)) :- prove(A,G). /* R-or 2 */prove(A,imp(F,G)) :- prove([F|A],G). /* R-imp */prove(A,S) :- delete(imp(F,G),A,NA),prove(NA,F),prove([G|NA],S). /* L-imp */	prove(A,S) :- delete(or(F,G),A,NA),prove([F|NA],S),prove([G|NA],S). /* L-or */	prove(A,S) :- delete(and(F,_G),A,NA),prove([F|NA],S). /* L-and 1 */prove(A,S) :- delete(and(_F,G),A,NA),prove([G|NA],S). /* L-and 2 */	prove(A,S) :- delete(and(F,G),A,NA),prove([F,G|NA],S). /* L-and 3, mike addition */prove(A,S) :- member(false,A).	/*prove(A,S) :- prove(A,G), prove([G|A],S). */ /* Cut rule */	member(X,[X|_T]).member(X,[Y|T]) :- X\==Y, member(X,T).	delete(X,[X|T],T).delete(X,[Y|T],[Y|DT]) :- X\==Y, delete(X,T,DT).