/* ------------------------------------- *//*     A CSP INTERPRETER & COMPILER      *//* ------------------------------------- *//* -------------------------------------------------------- *//* CSP INTERPRETER (to be plugged into the CTL interpreter) *//* -------------------------------------------------------- */trans(stop,_,_) :- fail.trans(skip,tau,stop).trans(choice(X,_Y),A,X1) :- trans(X,A,X1).trans(choice(_X,Y),A,Y1) :- trans(Y,A,Y1).trans(int_choice(X,_Y),tau,X).trans(int_choice(_X,Y),tau,Y).trans(if(Test,Then,_Else),A,X1) :- test(Test), trans(Then,A,X1).trans(if(Test,_Then,Else),A,X1) :- \+(test(Test)), trans(Else,A,X1).trans(if(Test,Then),A,X1) :- test(Test), trans(Then,A,X1).trans(prefix(V,Ch,X),  io(V,Ch) ,X).trans(prefix(V,Ch,Constraint,X), io(V,Ch) ,X) :-    test(Constraint).trans(par(X,Y), V, par(X1,Y1)) :-     trans(X, V, X1), trans(Y, V, Y1).     trans(interleave(X,Y), A, interleave(X1,Y) ) :- trans(X,A,X1).trans(interleave(X,Y), A, interleave(X,Y1) ) :- trans(Y,A,Y1).  trans(agent_call(X),A,X1) :- evaluate_agent_call(X,EX), agent(EX,AE),trans(AE,A,X1).trans(let(V,VExp,CExp),A,NewExpr) :-  evaluate_argument(VExp,EVExp),  V=EVExp,  trans(CExp,A,NewExpr).	evaluate_agent_call(AgentCall,EAgentCall) :-    AgentCall =..[AName|Par],    l_evaluate_arguments(Par,EPar),    EAgentCall =.. [AName|EPar].l_evaluate_arguments([],[]).l_evaluate_arguments([A|T],[EA|ET]) :-    evaluate_argument(A,EA),l_evaluate_arguments(T,ET).evaluate_argument(eval(V),EV) :-  evaluate_argument2(V,EV).evaluate_argument(keep(V),V).evaluate_argument2('+'(X,Y),Res) :-    evaluate_argument(X,EX),evaluate_argument(Y,EY),   Res is EX+EY.evaluate_argument2('-'(X,Y),Res) :-    evaluate_argument(X,EX),evaluate_argument(Y,EY),   Res is EX-EY.   test(true).test(false) :- fail.test(not(X)) :- when( ground(X), \+(test(X))).test(and(X,Y)) :- test(X),test(Y).test(or(X,_Y)) :- test(X).test(or(_X,Y)) :- test(Y).test(=(X,X)).test('!='(X,Y)) :- dif(X,Y).test('>'(X,Y)) :- when( ground((X,Y)), X>Y).test('<'(X,Y)) :- when( ground((X,Y)), X<Y).prop(State,A) :- trans(State,A,_).prop(State,deadlock) :- \+(live(State)).live(State) :- trans(State,_A,_S).  /* --------------------- *//* auxiliary definitions *//* --------------------- */app([],L,L).app([H|X],Y,[H|Z]) :- app(X,Y,Z).rev([],A,A).rev([H|X],A,R) :- rev(X,[H|A],R).member(X,[X|_]).member(X,[_|T]) :- member(X,T).member_nr(X,[X|_],1).member_nr(X,[_|T],N) :-  member_nr(X,T,TN), N is TN + 1.append([],L,L).append([H|X],Y,[H|Z]) :- append(X,Y,Z).delete([X|T],X,T).delete([Y|T],X,[Y|DT]) :- /* \+(X=Y), */  delete(T,X,DT).remove([],_X,[]).remove([X|T],X,T).remove([Y|T],X,[Y|DT]) :-  \+(X=Y),   remove(T,X,DT).   /* -------------------------------------------------------------------- *//* ------------------------ *//* Sample Agent Definitions *//* ------------------------ */:- dynamic agent/2.agent(a_App([],_Z,_Z) ,   skip).agent(a_App([_H|_X],_Y,[_H|_Z]) ,   agent_call(a_App(keep(_X),keep(_Y),keep(_Z)))).agent(a_REP(X) ,   prefix([X],r,agent_call(a_REP(keep(X))))).agent(a_RESET(0) ,   prefix([],reset,stop)).agent(a_BUF([]) ,   stop).agent(a_BUF([_H|_T]) ,   prefix([_H],b,agent_call(a_BUF(keep(_T))))).agent(a_INT(_X,[_X|_T]) ,   prefix([_X],i,agent_call(a_INT(eval(keep(_X)+keep(1)),keep(_T))))).    agent(a_TEST1 ,   prefix([],t1,interleave(agent_call(a_REP(keep(X))),   interleave(agent_call(a_REP(keep(X))),agent_call(a_RESET(keep(X))))))).   agent(a_TEST2 ,   prefix([],t2,    interleave(par(agent_call(a_REP(keep(X))),agent_call(a_REP(keep(_Y)))),               agent_call(a_RESET(keep(X)))))).agent(a_TEST3 ,   prefix([],buf,   interleave(agent_call(a_INT(keep(0),keep(_L))),              agent_call(a_BUF(keep(_L)))))).agent(a_MAIN ,   prefix([],app,agent_call(a_App(keep([a]),keep([b]),keep(_R)))))./* -------------------------------------------------------------------- *//* a simple verifier */unsafe(Expr,deadlock) :- \+live(Expr).  verify(Expr,[],Expr,ErrorDesc) :- unsafe(Expr,ErrorDesc).verify(Expr,[A|Tr],Res,ErrorDesc) :-        trans(Expr,A,NewExpr),        verify(NewExpr,Tr,Res,ErrorDesc).check(Ag,Trace) :- verify(agent_call(Ag),Trace,_Res,_Err).check1(T) :- check(a_TEST1,T).  /*  <--------- */check2(T) :- check(a_TEST2,T).check3(T) :- check(a_TEST3,T).check(T) :- check(a_MAIN,T).trace(Expr,[]).trace(Expr,[A|Tr]) :-        trans(Expr,A,NewExpr),        trace(NewExpr,Tr).	trace1(T) :- trace(agent_call(a_TEST1),T).trace2(T) :- trace(agent_call(a_TEST2),T).trace3(T) :- trace(agent_call(a_TEST3),T).trace(T) :- trace(agent_call(a_MAIN),T).buf_trace(X,T) :- trace(agent_call(a_BUF(keep(X))),T).  /*  <------- *//* ------------------------------------- *//* a simple iterative deepening verifier *//* ------------------------------------- */iv :- iv(a_MAIN).iv(X) :- id_verify(agent_call(X)).id_verify(Expr) :-  print('Intial expression: '),print(Expr),nl, print('Starting an iterative deepening search '), list(Tr),print('.'), verify(Expr,Tr,Res,ErrorDesc), nl,print('*** error found: '), print(ErrorDesc), print(' ! ***'),nl, print('Trace: '),print(Tr),nl, print('Final expression: '),print(Res),nl, print('Continue y or n ==>'), read(Y), Y='n'.  list([]). list([_H|T]) :- list(T).     