=============================================================================
BuxFix to the problem reported below: "Red" Cut (!) eliminated from predicate
auxil:arrange/3. [SG:12/04/2002]=============================================

From - Fri Apr 12 10:55:48 2002
Received: from [152.78.68.230] (pri05.dialup.ecs.soton.ac.uk [152.78.68.230])
	by hawk.ecs.soton.ac.uk (8.9.3/8.9.3) with ESMTP id KAA10571
	for <sg@ecs.soton.ac.uk>; Fri, 12 Apr 2002 10:32:58 +0100 (BST)
User-Agent: Microsoft-Entourage/10.0.0.1331
Date: Fri, 12 Apr 2002 10:32:58 +0100
Subject: Prazisions Problem und Fehler
From: Michael Leuschel <mal@ecs.soton.ac.uk>
To: Stefan Gruner <sg@ecs.soton.ac.uk>
Message-ID: <B8DC685A.4258%mal@ecs.soton.ac.uk>
Mime-version: 1.0
Content-type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by hawk.ecs.soton.ac.uk id KAA10571
Content-Length: 3678
Status:   
X-Mozilla-Status: 8003
X-Mozilla-Status2: 00000000
X-UIDL: 3c5e75bb000017ed

Stefan,

Es gibt immer noch ein Prazisions Problem in Ecce. Zum Beispiel, in
ecce_examples, rultests.pl, fuer die Spezialisierung von test2(X,Y) kriegt
man nur any¹s fuer die Typen (schau Dir cpy_conj__2(A,B,C,D,E) unten an).

Danach habe ich ein ganz einfaches Beispiel versucht, um Prazisions Problem
zu lokalisieren:



r(a).
r(X) :- r(f(X)).


r2(a).
r2(X) :- r2([b|X]).


Fuer r(a) kriegt man einen ordentlichen Type, aber fuer r2([]) kriege ich
folgendes:

~~~~~~~~~~~~~~~~~~~~~~~~~
upperBound failed with input
x_ub_new_t232,y_ex_new_t246
~~~~~~~~~~~~~~~~~~~~~~~~~
### WARNING CALL HAS FAILED !
### 
ecceRUL:widen2([r2(_207288)],rul__constraint__declaration([ub_new_t232(_2072
88)],[proc(y_ex_new_t229/1,[(y_ex_new_t229([]):-true)]),proc(y_ex_new_t228/1
,[(y
_ex_new_t228(b):-true)]),proc(ub_new_t232/1,[(ub_new_t232([]):-true),(ub_new
_t23
2([_212486|_212484]):-y_ex_new_t228(_212486),y_ex_new_t229(_212484))])]),[r2
(_22
2656)],rul__constraint__declaration([ex_new_t246(_222656)],[proc(y_ex_new_t2
29/1
,[(y_ex_new_t229([]):-true)]),proc(y_ex_new_t228/1,[(y_ex_new_t228(b):-true)
]),p
roc(ex_new_t248/1,[(ex_new_t248(b):-true)]),proc(ub_new_t232/1,[(ub_new_t232
([])
:-true),(ub_new_t232([_226047|_226045]):-y_ex_new_t228(_226047),y_ex_new_t22
9(_2
26045))]),proc(ex_new_t246/1,[(ex_new_t246([_226024|_226026]):-ub_new_t232(_
2260
26),ex_new_t248(_226024))])]),_206829,_208565)

Fuer r(c) kriege ich noch mehr Meldungen.


Michael

ORIGINAL (relevante Teile)
last([X],X).
last([_|T],X) :- last(T,X).

cpy([],A,A).
cpy([_|T],A,R) :- cpy(T,[a|A],R).

test2(L,X) :- cpy(L,[],L2), last(L2,X).

Arg2 von cpy ist Accumulator, Type sollte  "Liste von a's" sein.


/* Specialised program generated by Ecce 1.1 */
/* PD Goal: test2(A,B) */
/* Parameters: Abs:q InstCheck:d Msv:w NgSlv:g Part:y Prun:n Sel:t Whstl:f
Raf:noFar:no Dce:no Poly:n Dpu:no ParAbs:yes Msvp:no Rrc:no */
/* Transformation time: 810 ms */
/* Unfolding time: 530 ms */
/* Post-Processing time: 0 ms */

/* Specialised Predicates:
test2__1(A,B) :- test2(A,B).
cpy_conj__2(A,B,C,D,E) :- cpy(A,[a|B],[C|D]), last([C|D],E),
rul__constraint__declaration([any(A),any(E),any(C),any(D)],[proc('/'(y_ex_ne
w_t150,1),[':-'(y_ex_new_t150([F1|G1]),','(any(F1),any(G1)))]),proc('/'(any,
1),[':-'(any(H1),true)])]).
last__3(A,B) :- last([a|A],B),
rul__constraint__declaration([any([]),any(B),any(a),any(A)],[proc('/'(y_ex_n
ew_t150,1),[':-'(y_ex_new_t150([C1|D1]),','(any(C1),any(D1)))]),proc('/'(any
,1),[':-'(any(E1),true)])]).
last__4(A,B,C) :- last([A|B],C),
rul__constraint__declaration([any([]),any(C),any(a),any([A|B])],[proc('/'(y_
ex_new_t150,1),[':-'(y_ex_new_t150([D1|E1]),','(any(D1),any(E1)))]),proc('/'
(any,1),[':-'(any(F1),true)])]).
*/

test2(A,B) :- 
    test2__1(A,B).

/* test2__1(A,B) --> [test2(A,B)] */
test2__1([A|B],C) :-
    cpy_conj__2(B,[],D,E,C).

/* cpy_conj__2(A,B,C,D,E) -->
[cpy(A,[a|B],[C|D]),last([C|D],E),rul__constraint__declaration([any(A),any(E
),any(C),any(D)],[proc(y_ex_new_t150/1,[(y_ex_new_t150([F|G]):-any(F),any(G)
)]),proc(any/1,[(any(H):-true)])])] */
cpy_conj__2([],A,a,A,B) :-
    last__3(A,B).
cpy_conj__2([A|B],C,D,E,F) :-
    cpy_conj__2(B,[a|C],D,E,F).

/* last__3(A,B) -->
[last([a|A],B),rul__constraint__declaration([any([]),any(B),any(a),any(A)],[
proc(y_ex_new_t150/1,[(y_ex_new_t150([C|D]):-any(C),any(D))]),proc(any/1,[(a
ny(E):-true)])])] */
last__3([],a).
last__3([A|B],C) :-
    last__4(A,B,C).

/* last__4(A,B,C) -->
[last([A|B],C),rul__constraint__declaration([any([]),any(C),any(a),any([A|B]
)],[proc(y_ex_new_t150/1,[(y_ex_new_t150([D|E]):-any(D),any(E))]),proc(any/1
,[(any(F):-true)])])] */
last__4(A,[],A).
last__4(A,[B|C],D) :-
    last__4(B,C,D).

