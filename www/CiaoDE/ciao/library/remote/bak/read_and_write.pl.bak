:- module(read_and_write, [
        remote_read/2,
        remote_write/2
 %% ,
 %%         basic_terms_read/1,
 %%         basic_terms_written/1,
 %%         set_tracing/0,
 %%         unset_tracing/0
        ], []).


:- use_module(library(read), [read/2]).
:- use_module(library(attrdump),
        [copy_extract_attr/3, reinstall_attributes/1]).

%% :- use_module(library(fastrw)).

 %% :- data tracing/0.
 %% :- data
 %%         basic_terms_written/1, 
 %%         basic_terms_read/1.

 %% set_tracing:- 
 %%         asserta_fact(tracing),
 %%         retractall_fact(basic_terms_read(_)),
 %%         retractall_fact(basic_terms_written(_)),
 %%         asserta_fact(basic_terms_read(0)),
 %%         asserta_fact(basic_terms_written(0)).
 %% 
 %% unset_tracing:- retractall_fact(tracing).



%% Juggle with this values in order to select marshalling and/or 
%% attribute encoding. 

%%send_type(plain).
%%send_type(marshalled).

%% encode_type(plain).
%% encode_type(encode_attributes).



attr_encode(Term, '$encoded'(NewTerm, Attributes)):-
        copy_extract_attr(Term, NewTerm, Attributes).

attr_decode('$encoded'(FreeTerm, Attributes), Term):-
        reinstall_attributes(Attributes),
        Term = FreeTerm.


remote_write(Stream, Term):-
        attr_encode(Term, TermEncoded),
        displayq(Stream, TermEncoded),
        display(Stream, '.'),
        nl(Stream).

remote_read(Stream, Term):-
        read(Stream, TermEncoded),
        attr_decode(TermEncoded, Term).



 %% remote_write(Stream, Term):-
 %%         (
 %%             encode_type(plain) ->
 %%             TermEncoded = Term
 %%         ;
 %%             attr_encode(Term, TermEncoded)
 %%         ),
 %%         log_stream(writing, TermEncoded),
 %%         (
 %%             send_type(plain) ->
 %%             displayq(Stream, TermEncoded),
 %%             display(Stream, '.'),
 %%             nl(Stream)
 %%         ;
 %%             fast_write(Stream, TermEncoded)
 %%         ).


 %% remote_read(Stream, Term):-
 %%         (
 %%             send_type(plain) ->
 %%             read(Stream, TermEncoded)
 %%         ;
 %%             fast_read(Stream, TermEncoded)
 %%         ),
 %%         display('read received '),
 %%         displayq(TermEncoded),
 %%         nl,
 %%         log_stream(reading, TermEncoded),
 %%         display(logged),
 %%         nl,
 %%         (
 %%             encode_type(plain) ->
 %%             TermEncoded = Term
 %%         ;
 %%             attr_decode(TermEncoded, Term)
 %%         ),
 %%         display('Finished remote reading'),
 %%         nl.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 %% log_stream(What, Term):-
 %%         (
 %%             current_fact(tracing) ->
 %%             compute_term_size(Term, Size),
 %%             update(What, Size)
 %%         ;
 %%             true
 %%         ).
 %% 
 %% 
 %% compute_term_size(Term, 1) :-  var(Term), !.
 %% compute_term_size(Term, 1) :-  atomic(Term), !.
 %% compute_term_size([H|R], S):- !,
 %%         compute_term_size(H, Sh),
 %%         compute_term_size(R, Sr),
 %%         S is Sh + Sr.
 %% compute_term_size(Struct, S):-
 %%         functor(Struct, _Name, Arity),
 %%         compute_args_size(Arity, Struct, Size),
 %%         S is Size + 1.
 %% 
 %% compute_args_size(0, _Struct, 0).
 %% compute_args_size(N, Struct, Size):-
 %%         N > 0,
 %%         arg(N, Struct, Arg),
 %%         compute_term_size(Arg, ArgSize),
 %%         N1 is N - 1,
 %%         compute_args_size(N1, Struct, RestSize),
 %%         Size is ArgSize + RestSize.
 %% 

 %% update(writing, Delta):-
 %%         retract_fact(basic_terms_written(Written)),
 %%         NewWritten is Written + Delta,
 %%         asserta_fact(basic_terms_written(NewWritten)).
 %% update(reading, Delta):-
 %%         retract_fact(basic_terms_read(Written)),
 %%         NewWritten is Written + Delta,
 %%         asserta_fact(basic_terms_read(NewWritten)).
 %% 
